@page "/order/list"
@using FoodBlazor.Utility
@using Microsoft.AspNetCore.Authorization
@using System.Security.Claims
@inject IOrderRepository _orderRepository
@inject NavigationManager _navigationManager
@attribute [Authorize]
@if (IsProcessing)
{
    <div class="position-absolute w-100 h-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="/images/loading.gif" alt="Loading....." />
    </div>
}
else
{
    <div class="card shadow border-0 m-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">Order List</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">

            @if (OrderHeaders.Any())
            {
               @*  <table class="table table-bordered table-striped">
                    <thead>
                        <tr>
                            <th>ID</th>
                            <th>Name</th>
                            <th>Phone Number</th>
                            <th>Email</th>
                            <th>Order Total</th>
                            <th>Order Date</th>
                            <th>Status</th>
                           
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var obj in OrderHeaders)
                        {
                            <tr>
                                <td>@obj.Id</td>
                                <td>@obj.Name</td>
                                <td>@obj.PhoneNumber</td>
                                <td>@obj.Email</td>
                                <td>@obj.OrderTotal.ToString("c")</td>
                                <td>@obj.OrderDate</td>
                                <td>@obj.Status</td>
                                <td class="text-end">
                                    <a href="@($"order/details/{obj.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i> Edit</a>
                                    
                                </td>
                            </tr>
                        }
                    </tbody>
                </table> *@
            }

            <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="false" FilterMode="FilterMode.Advanced"
                            AllowSorting="true" PageSize="3" AllowPaging="true" PagerHorizontalAlign="HorizontalAlign.Left"
                            ShowPagingSummary="true" Data="@OrderHeaders" ColumnWidth="300px"
                            LogicalFilterOperator="LogicalFilterOperator.Or" SelectionMode="DataGridSelectionMode.Single">
                <Columns>
                    <RadzenDataGridColumn Property="Id" Filterable="true" Title="ID" Frozen="true" Width="80px" />

                    <RadzenDataGridColumn Property="Name" Title="Name" Frozen="true" Width="120px" />
                    <RadzenDataGridColumn Property="PhoneNumber" Title="Phone Number" Width="120px" />
                    <RadzenDataGridColumn Property="Email" Title="Email" Width="200px" />
                    <RadzenDataGridColumn Property="OrderTotal" Title="Order Total" FormatString="{0:C}" Width="120px" />
                    <RadzenDataGridColumn Property="OrderDate" Title="Order Date" FormatString="{0:d}" Width="160px" />
                    <RadzenDataGridColumn Property="Status" Title="Status" Width="160px" />
                    <RadzenDataGridColumn Title="Action" Sortable="false" Filterable="false" Width="80px" TextAlign="TextAlign.Center">
                        <Template Context="orderHeader">
                            <RadzenButton Shade="Shade.Lighter" Text="Details" ButtonStyle="ButtonStyle.Primary"
                                          Click="@(()=>_navigationManager.NavigateTo($"order/details/{orderHeader.Id}"))"></RadzenButton>
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>
            </RadzenDataGrid>

        </div>
    </div>
}

@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<OrderHeader> OrderHeaders { get; set; } = new List<OrderHeader>();

    private bool? IsAdmin { get; set; }
    private string? UserId { get; set; }

    [CascadingParameter]
    public Task<AuthenticationState> AuthenticationState { get; set; }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadOrderHeaders();
            IsProcessing = false;
            StateHasChanged();
        }
        //return base.OnAfterRenderAsync(firstRender);
    }

    private async Task LoadOrderHeaders()
    {
        IsProcessing = true;
        StateHasChanged();

        await CheckAuthoriztion();
        @if (IsAdmin == true)
        {
            OrderHeaders = await _orderRepository.GetAllAsync();
        }
        else
        {
            OrderHeaders = await _orderRepository.GetAllAsync(UserId);
        }
        // Load categories

        IsProcessing = false;
    }

    private async Task CheckAuthoriztion()
    {
        if (AuthenticationState is not null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;

            IsAdmin = user?.IsInRole(SD.Role_Admin);
            UserId = user?.FindFirst(ClaimTypes.NameIdentifier)?.Value;

        }
    }

}
